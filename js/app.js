// Generated by CoffeeScript 1.9.0
(function() {
  var Game, Player, Settings, UI, animate, answer, check, checkAnswer, generateTones, getFrequencySpan, play, rand, setPlayer, setupClicks, setupKeyBindings, setupUI, startRound;

  Settings = (function() {
    function Settings() {}

    Settings.prototype.ANIMATION_TIME = 256;

    Settings.prototype.PLAYING_TIME = 2048;

    Settings.prototype.LOWEST_FREQUENCY = 110;

    Settings.prototype.HIGHEST_FREQUENCY = 880;

    Settings.prototype.SPAN_DIVIDER = 10;

    return Settings;

  })();

  Player = (function() {
    function Player() {}

    Player.prototype.pause = function() {};

    return Player;

  })();

  Game = (function() {
    function Game() {}

    Game.prototype.firstFrequency = 0;

    Game.prototype.secondFrequency = 0;

    Game.prototype.currentPlayer = 'none';

    Game.prototype.isRoundStarting = false;

    Game.prototype.player = new Player;

    return Game;

  })();

  UI = (function() {
    function UI() {}

    UI.prototype.$first = null;

    UI.prototype.$second = null;

    UI.prototype.$lower = null;

    UI.prototype.$equal = null;

    UI.prototype.$higher = null;

    return UI;

  })();

  getFrequencySpan = function(frequency) {
    var base;
    base = Settings.LOWEST_FREQUENCY;
    while (true) {
      if (base <= frequency && frequency < 2 * base) {
        break;
      } else {
        base *= 2;
      }
    }
    return base / Settings.SPAN_DIVIDER;
  };

  generateTones = function() {
    var frequencyDifference, frequencySpan;
    Game.firstFrequency = rand(Settings.LOWEST_FREQUENCY, Settings.HIGHEST_FREQUENCY);
    frequencySpan = getFrequencySpan(Game.firstFrequency);
    frequencyDifference = rand(-frequencySpan, frequencySpan);
    Game.secondFrequency = Game.firstFrequency + frequencyDifference;
    return Game.currentPlayer = 'none';
  };

  rand = function(minimum, maximum) {
    rand = minimum + Math.random() * (maximum - minimum + 1);
    return Math.floor(rand);
  };

  setPlayer = function(frequency, player) {
    Game.currentPlayer = player;
    return Game.player = new T('sin', {
      freq: frequency,
      mul: 0.4
    });
  };

  checkAnswer = function(answer) {
    var $advices, $body, success;
    switch (answer) {
      case 'lower':
        success = Game.firstFrequency > Game.secondFrequency;
        break;
      case 'equal':
        success = Game.firstFrequency === Game.secondFrequency;
        break;
      case 'higher':
        success = Game.firstFrequency < Game.secondFrequency;
    }
    $body = $('body');
    $advices = $('.advice');
    if (success) {
      $body.removeClass('body-inverted');
      $advices.removeClass('advice-inverted');
    } else {
      $body.addClass('body-inverted');
      $advices.addClass('advice-inverted');
    }
    Game.player.pause();
    return generateTones();
  };

  animate = function(self) {
    var $this;
    $this = $(self);
    return $this.animate({
      'width': '-=16px',
      'height': '-=16px',
      'margin-top': '+=8px',
      'margin-left': '+=8px'
    }, Settings.ANIMATION_TIME, 'swing', function() {
      return $this.animate({
        'width': '+=16px',
        'height': '+=16px',
        'margin-top': '-=8px',
        'margin-left': '-=8px'
      }, Settings.ANIMATION_TIME);
    });
  };

  play = function(frequency, name) {
    var currentPlayer;
    if (currentPlayer !== name) {
      Game.player.pause();
      setPlayer(frequency, name);
      return Game.player.play();
    } else {
      Game.player.pause();
      return currentPlayer = 'none';
    }
  };

  startRound = function() {
    var isRoundStarting;
    isRoundStarting = true;
    generateTones();
    play(Game.firstFrequency, 'first');
    return setTimeout(function() {
      play(Game.secondFrequency, 'second');
      return setTimeout(function() {
        Game.player.pause();
        return isRoundStarting = false;
      }, Settings.PLAYING_TIME);
    }, Settings.PLAYING_TIME);
  };

  check = function(self, frequency, name) {
    if (!Game.isRoundStarting) {
      animate(self);
      return play(frequency, name);
    }
  };

  answer = function(self, name) {
    if (!Game.isRoundStarting) {
      animate(self);
      checkAnswer(name);
      return startRound();
    }
  };

  setupUI = function() {
    UI.$first = $('#first');
    UI.$second = $('second');
    UI.$lower = $('lower');
    UI.$equal = $('equal');
    return UI.$higher = $('higher');
  };

  setupKeyBindings = function() {
    Mousetrap.bind('left', function() {
      return UI.$first.click();
    });
    Mousetrap.bind('right', function() {
      return UI.$second.click();
    });
    Mousetrap.bind('down', function() {
      return UI.$lower.click();
    });
    Mousetrap.bind('space', function() {
      return UI.$equal.click();
    });
    return Mousetrap.bind('up', function() {
      return UI.$higher.click();
    });
  };

  setupClicks = function() {
    UI.$first.click(function() {
      return check(this, Game.firstFrequency, 'first');
    });
    UI.$second.click(function() {
      return check(this, Game.secondFrequency, 'second');
    });
    UI.$lower.click(function() {
      return answer(this, 'lower');
    });
    UI.$equal.click(function() {
      return answer(this, 'equal');
    });
    return UI.$higher.click(function() {
      return answer(this, 'higher');
    });
  };

  $(function() {
    setupUI();
    setupKeyBindings();
    setupClicks();
    return startRound();
  });

}).call(this);
