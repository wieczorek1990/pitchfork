// Generated by CoffeeScript 1.9.0
var Game, Settings, UI, animate, answer, check, checkAnswer, g, generateTones, getFrequencySpan, play, rand, s, setPlayer, setupClicks, setupKeyBindings, setupUI, startRound;

Settings = (function() {
  function Settings() {}

  Settings.prototype.ANIMATION_TIME = 256;

  Settings.prototype.PLAYING_TIME = 2048;

  Settings.prototype.LOWEST_FREQUENCY = 110;

  Settings.prototype.HIGHEST_FREQUENCY = 880;

  Settings.prototype.SPAN_DIVIDER = 10;

  Settings.prototype.EQUAL_SPAN_DIVIDER = 5;

  return Settings;

})();

Game = (function() {
  function Game() {}

  Game.prototype.firstFrequency = 0;

  Game.prototype.secondFrequency = 0;

  Game.prototype.currentPlayer = 'none';

  Game.prototype.isRoundStarting = false;

  Game.prototype.playerInitialized = false;

  return Game;

})();

UI = (function() {
  function UI() {}

  UI.prototype.$first = null;

  UI.prototype.$second = null;

  UI.prototype.$lower = null;

  UI.prototype.$equal = null;

  UI.prototype.$higher = null;

  return UI;

})();

s = new Settings();

g = new Game();

getFrequencySpan = function(frequency) {
  var base;
  base = s.LOWEST_FREQUENCY;
  while (true) {
    if (base <= frequency && frequency < 2 * base) {
      break;
    } else {
      base *= 2;
    }
  }
  return base / s.SPAN_DIVIDER;
};

generateTones = function() {
  var frequencyDifference, frequencySpan;
  g.firstFrequency = rand(s.LOWEST_FREQUENCY, s.HIGHEST_FREQUENCY);
  frequencySpan = getFrequencySpan(g.firstFrequency);
  frequencyDifference = rand(-frequencySpan, frequencySpan);
  if (Math.abs(frequencyDifference) > frequencySpan / s.EQUAL_SPAN_DIVIDER) {
    g.secondFrequency = g.firstFrequency + frequencyDifference;
  } else {
    g.secondFrequency = g.firstFrequency;
  }
  g.currentPlayer = 'none';
  console.log(g.firstFrequency);
  return console.log(g.secondFrequency);
};

rand = function(minimum, maximum) {
  var random;
  random = minimum + Math.random() * (maximum - minimum + 1);
  return Math.floor(random);
};

setPlayer = function(frequency, player) {
  g.currentPlayer = player;
  return g.player = new T('sin', {
    freq: frequency,
    mul: 0.4
  });
};

checkAnswer = function(answer) {
  var $advices, $body, success;
  switch (answer) {
    case 'lower':
      success = g.firstFrequency > g.secondFrequency;
      break;
    case 'equal':
      success = g.firstFrequency === g.secondFrequency;
      break;
    case 'higher':
      success = g.firstFrequency < g.secondFrequency;
  }
  $body = $('body');
  $advices = $('.advice');
  if (success) {
    $body.removeClass('body-inverted');
    $advices.removeClass('advice-inverted');
  } else {
    $body.addClass('body-inverted');
    $advices.addClass('advice-inverted');
  }
  g.player.pause();
  return generateTones();
};

animate = function(self) {
  var $this;
  $this = $(self);
  return $this.animate({
    'width': '-=16px',
    'height': '-=16px',
    'margin-top': '+=8px',
    'margin-left': '+=8px'
  }, s.ANIMATION_TIME, 'swing', function() {
    return $this.animate({
      'width': '+=16px',
      'height': '+=16px',
      'margin-top': '-=8px',
      'margin-left': '-=8px'
    }, s.ANIMATION_TIME);
  });
};

play = function(frequency, name) {
  if (g.currentPlayer !== name) {
    if (g.playerInitialized) {
      g.player.pause();
    } else {
      g.playerInitialized = true;
    }
    setPlayer(frequency, name);
    return g.player.play();
  } else {
    g.player.pause();
    return g.currentPlayer = 'none';
  }
};

startRound = function() {
  g.isRoundStarting = true;
  generateTones();
  play(g.firstFrequency, 'first');
  return setTimeout(function() {
    play(g.secondFrequency, 'second');
    return setTimeout(function() {
      g.player.pause();
      return g.isRoundStarting = false;
    }, s.PLAYING_TIME);
  }, s.PLAYING_TIME);
};

check = function(self, frequency, name) {
  if (!g.isRoundStarting) {
    animate(self);
    return play(frequency, name);
  }
};

answer = function(self, name) {
  if (!g.isRoundStarting) {
    animate(self);
    checkAnswer(name);
    return startRound();
  }
};

setupUI = function() {
  UI.$first = $('#first');
  UI.$second = $('#second');
  UI.$lower = $('#lower');
  UI.$equal = $('#equal');
  return UI.$higher = $('#higher');
};

setupKeyBindings = function() {
  Mousetrap.bind('left', function() {
    return UI.$first.click();
  });
  Mousetrap.bind('right', function() {
    return UI.$second.click();
  });
  Mousetrap.bind('down', function() {
    return UI.$lower.click();
  });
  Mousetrap.bind('space', function() {
    return UI.$equal.click();
  });
  return Mousetrap.bind('up', function() {
    return UI.$higher.click();
  });
};

setupClicks = function() {
  UI.$first.click(function() {
    return check(this, g.firstFrequency, 'first');
  });
  UI.$second.click(function() {
    return check(this, g.secondFrequency, 'second');
  });
  UI.$lower.click(function() {
    return answer(this, 'lower');
  });
  UI.$equal.click(function() {
    return answer(this, 'equal');
  });
  return UI.$higher.click(function() {
    return answer(this, 'higher');
  });
};

$(function() {
  setupUI();
  setupKeyBindings();
  setupClicks();
  return startRound();
});
